<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GUdevDevice">
<refmeta>
<refentrytitle role="top_of_page" id="GUdevDevice.top_of_page">GUdevDevice</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GUDEV Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GUdevDevice</refname>
<refpurpose>Get information about a device</refpurpose>
</refnamediv>

<refsynopsisdiv id="GUdevDevice.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GUdevDevice-struct">GUdevDevice</link>;
                    <link linkend="GUdevDeviceClass">GUdevDeviceClass</link>;
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-subsystem">g_udev_device_get_subsystem</link>         (<link linkend="GUdevDevice">GUdevDevice</link> *device);
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-devtype">g_udev_device_get_devtype</link>           (<link linkend="GUdevDevice">GUdevDevice</link> *device);
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-name">g_udev_device_get_name</link>              (<link linkend="GUdevDevice">GUdevDevice</link> *device);
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-number">g_udev_device_get_number</link>            (<link linkend="GUdevDevice">GUdevDevice</link> *device);
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-sysfs-path">g_udev_device_get_sysfs_path</link>        (<link linkend="GUdevDevice">GUdevDevice</link> *device);
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-driver">g_udev_device_get_driver</link>            (<link linkend="GUdevDevice">GUdevDevice</link> *device);
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-action">g_udev_device_get_action</link>            (<link linkend="GUdevDevice">GUdevDevice</link> *device);
<link linkend="guint64">guint64</link>             <link linkend="g-udev-device-get-seqnum">g_udev_device_get_seqnum</link>            (<link linkend="GUdevDevice">GUdevDevice</link> *device);
<link linkend="GUdevDeviceType">GUdevDeviceType</link>     <link linkend="g-udev-device-get-device-type">g_udev_device_get_device_type</link>       (<link linkend="GUdevDevice">GUdevDevice</link> *device);
<link linkend="GUdevDeviceNumber">GUdevDeviceNumber</link>   <link linkend="g-udev-device-get-device-number">g_udev_device_get_device_number</link>     (<link linkend="GUdevDevice">GUdevDevice</link> *device);
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-device-file">g_udev_device_get_device_file</link>       (<link linkend="GUdevDevice">GUdevDevice</link> *device);
const <link linkend="gchar">gchar</link>* const * <link linkend="g-udev-device-get-device-file-symlinks">g_udev_device_get_device_file_symlinks</link>
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device);
<link linkend="GUdevDevice">GUdevDevice</link> *       <link linkend="g-udev-device-get-parent">g_udev_device_get_parent</link>            (<link linkend="GUdevDevice">GUdevDevice</link> *device);
<link linkend="GUdevDevice">GUdevDevice</link> *       <link linkend="g-udev-device-get-parent-with-subsystem">g_udev_device_get_parent_with_subsystem</link>
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *subsystem,
                                                         const <link linkend="gchar">gchar</link> *devtype);
const <link linkend="gchar">gchar</link>* const * <link linkend="g-udev-device-get-property-keys">g_udev_device_get_property_keys</link>    (<link linkend="GUdevDevice">GUdevDevice</link> *device);
<link linkend="gboolean">gboolean</link>            <link linkend="g-udev-device-has-property">g_udev_device_has_property</link>          (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-property">g_udev_device_get_property</link>          (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);
<link linkend="gint">gint</link>                <link linkend="g-udev-device-get-property-as-int">g_udev_device_get_property_as_int</link>   (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);
<link linkend="guint64">guint64</link>             <link linkend="g-udev-device-get-property-as-uint64">g_udev_device_get_property_as_uint64</link>
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);
<link linkend="gdouble">gdouble</link>             <link linkend="g-udev-device-get-property-as-double">g_udev_device_get_property_as_double</link>
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);
<link linkend="gboolean">gboolean</link>            <link linkend="g-udev-device-get-property-as-boolean">g_udev_device_get_property_as_boolean</link>
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);
const <link linkend="gchar">gchar</link>* const * <link linkend="g-udev-device-get-property-as-strv">g_udev_device_get_property_as_strv</link> (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);
const <link linkend="gchar">gchar</link> *       <link linkend="g-udev-device-get-sysfs-attr">g_udev_device_get_sysfs_attr</link>        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="gint">gint</link>                <link linkend="g-udev-device-get-sysfs-attr-as-int">g_udev_device_get_sysfs_attr_as_int</link> (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="guint64">guint64</link>             <link linkend="g-udev-device-get-sysfs-attr-as-uint64">g_udev_device_get_sysfs_attr_as_uint64</link>
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="gdouble">gdouble</link>             <link linkend="g-udev-device-get-sysfs-attr-as-double">g_udev_device_get_sysfs_attr_as_double</link>
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="gboolean">gboolean</link>            <link linkend="g-udev-device-get-sysfs-attr-as-boolean">g_udev_device_get_sysfs_attr_as_boolean</link>
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);
const <link linkend="gchar">gchar</link>* const * <link linkend="g-udev-device-get-sysfs-attr-as-strv">g_udev_device_get_sysfs_attr_as_strv</link>
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GUdevDevice.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----GUdevDevice
</synopsis>
</refsect1>








<refsect1 id="GUdevDevice.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="GUdevDevice"><type>GUdevDevice</type></link> class is used to get information about a specific
device. Note that you cannot instantiate a <link linkend="GUdevDevice"><type>GUdevDevice</type></link> object
yourself. Instead you must use <link linkend="GUdevClient"><type>GUdevClient</type></link> to obtain <link linkend="GUdevDevice"><type>GUdevDevice</type></link>
objects.
</para>
<para>
To get basic information about a device, use
<link linkend="g-udev-device-get-subsystem"><function>g_udev_device_get_subsystem()</function></link>, <link linkend="g-udev-device-get-devtype"><function>g_udev_device_get_devtype()</function></link>,
<link linkend="g-udev-device-get-name"><function>g_udev_device_get_name()</function></link>, <link linkend="g-udev-device-get-number"><function>g_udev_device_get_number()</function></link>,
<link linkend="g-udev-device-get-sysfs-path"><function>g_udev_device_get_sysfs_path()</function></link>, <link linkend="g-udev-device-get-driver"><function>g_udev_device_get_driver()</function></link>,
<link linkend="g-udev-device-get-action"><function>g_udev_device_get_action()</function></link>, <link linkend="g-udev-device-get-seqnum"><function>g_udev_device_get_seqnum()</function></link>,
<link linkend="g-udev-device-get-device-type"><function>g_udev_device_get_device_type()</function></link>, <link linkend="g-udev-device-get-device-number"><function>g_udev_device_get_device_number()</function></link>,
<link linkend="g-udev-device-get-device-file"><function>g_udev_device_get_device_file()</function></link>,
<link linkend="g-udev-device-get-device-file-symlinks"><function>g_udev_device_get_device_file_symlinks()</function></link>.
</para>
<para>
To navigate the device tree, use <link linkend="g-udev-device-get-parent"><function>g_udev_device_get_parent()</function></link> and
<link linkend="g-udev-device-get-parent-with-subsystem"><function>g_udev_device_get_parent_with_subsystem()</function></link>.
</para>
<para>
To access udev properties for the device, use
<link linkend="g-udev-device-get-property-keys"><function>g_udev_device_get_property_keys()</function></link>,
<link linkend="g-udev-device-has-property"><function>g_udev_device_has_property()</function></link>,
<link linkend="g-udev-device-get-property"><function>g_udev_device_get_property()</function></link>,
<link linkend="g-udev-device-get-property-as-int"><function>g_udev_device_get_property_as_int()</function></link>,
<link linkend="g-udev-device-get-property-as-uint64"><function>g_udev_device_get_property_as_uint64()</function></link>,
<link linkend="g-udev-device-get-property-as-double"><function>g_udev_device_get_property_as_double()</function></link>,
<link linkend="g-udev-device-get-property-as-boolean"><function>g_udev_device_get_property_as_boolean()</function></link> and
<link linkend="g-udev-device-get-property-as-strv"><function>g_udev_device_get_property_as_strv()</function></link>.
</para>
<para>
To access sysfs attributes for the device, use
<link linkend="g-udev-device-get-sysfs-attr"><function>g_udev_device_get_sysfs_attr()</function></link>,
<link linkend="g-udev-device-get-sysfs-attr-as-int"><function>g_udev_device_get_sysfs_attr_as_int()</function></link>,
<link linkend="g-udev-device-get-sysfs-attr-as-uint64"><function>g_udev_device_get_sysfs_attr_as_uint64()</function></link>,
<link linkend="g-udev-device-get-sysfs-attr-as-double"><function>g_udev_device_get_sysfs_attr_as_double()</function></link>,
<link linkend="g-udev-device-get-sysfs-attr-as-boolean"><function>g_udev_device_get_sysfs_attr_as_boolean()</function></link> and
<link linkend="g-udev-device-get-sysfs-attr-as-strv"><function>g_udev_device_get_sysfs_attr_as_strv()</function></link>.
</para>
<para>
Note that all getters on <link linkend="GUdevDevice"><type>GUdevDevice</type></link> are non-reffing – returned
values are owned by the object, should not be freed and are only
valid as long as the object is alive.
</para>
<para>
By design, <link linkend="GUdevDevice"><type>GUdevDevice</type></link> will not react to changes for a device – it
only contains a snapshot of information when the <link linkend="GUdevDevice"><type>GUdevDevice</type></link>
object was created. To work with changes, you typically connect to
the <link linkend="GUdevClient-uevent"><type>"uevent"</type></link> signal on a <link linkend="GUdevClient"><type>GUdevClient</type></link> and get a new
<link linkend="GUdevDevice"><type>GUdevDevice</type></link> whenever an event happens.</para>
<para>
</para>
</refsect1>

<refsect1 id="GUdevDevice.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GUdevDevice-struct" role="struct">
<title>GUdevDevice</title>
<indexterm zone="GUdevDevice-struct"><primary sortas="GUdevDevice">GUdevDevice</primary></indexterm><programlisting>typedef struct _GUdevDevice GUdevDevice;</programlisting>
<para>
The <link linkend="GUdevDevice"><type>GUdevDevice</type></link> struct is opaque and should not be accessed directly.</para>
<para>
</para><variablelist role="struct">
</variablelist></refsect2>
<refsect2 id="GUdevDeviceClass" role="struct">
<title>GUdevDeviceClass</title>
<indexterm zone="GUdevDeviceClass"><primary sortas="GUdevDeviceClass">GUdevDeviceClass</primary></indexterm><programlisting>typedef struct {
  GObjectClass parent_class;
} GUdevDeviceClass;
</programlisting>
<para>
Class structure for <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GObjectClass">GObjectClass</link>&#160;<structfield>parent_class</structfield>;</term>
<listitem><simpara> Parent class.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-subsystem" role="function">
<title>g_udev_device_get_subsystem ()</title>
<indexterm zone="g-udev-device-get-subsystem"><primary sortas="g_udev_device_get_subsystem">g_udev_device_get_subsystem</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_subsystem         (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the subsystem for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The subsystem for <parameter>device</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-devtype" role="function">
<title>g_udev_device_get_devtype ()</title>
<indexterm zone="g-udev-device-get-devtype"><primary sortas="g_udev_device_get_devtype">g_udev_device_get_devtype</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_devtype           (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the device type for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The devtype for <parameter>device</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-name" role="function">
<title>g_udev_device_get_name ()</title>
<indexterm zone="g-udev-device-get-name"><primary sortas="g_udev_device_get_name">g_udev_device_get_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_name              (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the name of <parameter>device</parameter>, e.g. "sda3".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The name of <parameter>device</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-number" role="function">
<title>g_udev_device_get_number ()</title>
<indexterm zone="g-udev-device-get-number"><primary sortas="g_udev_device_get_number">g_udev_device_get_number</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_number            (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the number of <parameter>device</parameter>, e.g. "3" if <link linkend="g-udev-device-get-name"><function>g_udev_device_get_name()</function></link> returns "sda3".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The number of <parameter>device</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-sysfs-path" role="function">
<title>g_udev_device_get_sysfs_path ()</title>
<indexterm zone="g-udev-device-get-sysfs-path"><primary sortas="g_udev_device_get_sysfs_path">g_udev_device_get_sysfs_path</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_sysfs_path        (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the sysfs path for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The sysfs path for <parameter>device</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-driver" role="function">
<title>g_udev_device_get_driver ()</title>
<indexterm zone="g-udev-device-get-driver"><primary sortas="g_udev_device_get_driver">g_udev_device_get_driver</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_driver            (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the name of the driver used for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The name of the driver for <parameter>device</parameter> or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if unknown.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-action" role="function">
<title>g_udev_device_get_action ()</title>
<indexterm zone="g-udev-device-get-action"><primary sortas="g_udev_device_get_action">g_udev_device_get_action</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_action            (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the most recent action (e.g. "add", "remove", "change", etc.) for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> An action string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-seqnum" role="function">
<title>g_udev_device_get_seqnum ()</title>
<indexterm zone="g-udev-device-get-seqnum"><primary sortas="g_udev_device_get_seqnum">g_udev_device_get_seqnum</primary></indexterm><programlisting><link linkend="guint64">guint64</link>             g_udev_device_get_seqnum            (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the most recent sequence number for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A sequence number.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-device-type" role="function">
<title>g_udev_device_get_device_type ()</title>
<indexterm zone="g-udev-device-get-device-type"><primary sortas="g_udev_device_get_device_type">g_udev_device_get_device_type</primary></indexterm><programlisting><link linkend="GUdevDeviceType">GUdevDeviceType</link>     g_udev_device_get_device_type       (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the type of the device file, if any, for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The device number for <parameter>device</parameter> or <link linkend="G-UDEV-DEVICE-TYPE-NONE--CAPS"><type>G_UDEV_DEVICE_TYPE_NONE</type></link> if the device does not have a device file.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-device-number" role="function">
<title>g_udev_device_get_device_number ()</title>
<indexterm zone="g-udev-device-get-device-number"><primary sortas="g_udev_device_get_device_number">g_udev_device_get_device_number</primary></indexterm><programlisting><link linkend="GUdevDeviceNumber">GUdevDeviceNumber</link>   g_udev_device_get_device_number     (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the device number, if any, for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The device number for <parameter>device</parameter> or 0 if unknown.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-device-file" role="function">
<title>g_udev_device_get_device_file ()</title>
<indexterm zone="g-udev-device-get-device-file"><primary sortas="g_udev_device_get_device_file">g_udev_device_get_device_file</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_device_file       (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the device file for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The device file for <parameter>device</parameter> or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if no device file
exists.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-device-file-symlinks" role="function">
<title>g_udev_device_get_device_file_symlinks ()</title>
<indexterm zone="g-udev-device-get-device-file-symlinks"><primary sortas="g_udev_device_get_device_file_symlinks">g_udev_device_get_device_file_symlinks</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* const * g_udev_device_get_device_file_symlinks
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets a list of symlinks (in <literal>/dev</literal>) that points to
the device file for <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="NULL--CAPS"><literal>NULL</literal></link> terminated string array of symlinks. This array is owned by <parameter>device</parameter> and should not be freed by the caller.. <acronym>transfer</acronym> none. <acronym>array</acronym> zero-terminated=1. <acronym>element-type</acronym> utf8. </simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-parent" role="function">
<title>g_udev_device_get_parent ()</title>
<indexterm zone="g-udev-device-get-parent"><primary sortas="g_udev_device_get_parent">g_udev_device_get_parent</primary></indexterm><programlisting><link linkend="GUdevDevice">GUdevDevice</link> *       g_udev_device_get_parent            (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets the immediate parent of <parameter>device</parameter>, if any.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link> or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>device</parameter> has no parent. Free with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-parent-with-subsystem" role="function">
<title>g_udev_device_get_parent_with_subsystem ()</title>
<indexterm zone="g-udev-device-get-parent-with-subsystem"><primary sortas="g_udev_device_get_parent_with_subsystem">g_udev_device_get_parent_with_subsystem</primary></indexterm><programlisting><link linkend="GUdevDevice">GUdevDevice</link> *       g_udev_device_get_parent_with_subsystem
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *subsystem,
                                                         const <link linkend="gchar">gchar</link> *devtype);</programlisting>
<para>
Walks up the chain of parents of <parameter>device</parameter> and returns the first
device encountered where <parameter>subsystem</parameter> and <parameter>devtype</parameter> matches, if any.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subsystem</parameter>&#160;:</term>
<listitem><simpara> The subsystem of the parent to get.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>devtype</parameter>&#160;:</term>
<listitem><simpara> The devtype of the parent to get or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.. <acronym>allow-none</acronym>. </simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link> or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>device</parameter> has no parent with <parameter>subsystem</parameter> and <parameter>devtype</parameter>. Free with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-property-keys" role="function">
<title>g_udev_device_get_property_keys ()</title>
<indexterm zone="g-udev-device-get-property-keys"><primary sortas="g_udev_device_get_property_keys">g_udev_device_get_property_keys</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* const * g_udev_device_get_property_keys    (<link linkend="GUdevDevice">GUdevDevice</link> *device);</programlisting>
<para>
Gets all keys for properties on <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="NULL--CAPS"><literal>NULL</literal></link> terminated string array of property keys. This array is owned by <parameter>device</parameter> and should not be freed by the caller.. <acronym>transfer</acronym> none. <acronym>array</acronym> zero-terminated=1. <acronym>element-type</acronym> utf8. </simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-has-property" role="function">
<title>g_udev_device_has_property ()</title>
<indexterm zone="g-udev-device-has-property"><primary sortas="g_udev_device_has_property">g_udev_device_has_property</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_udev_device_has_property          (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>
Check if a the property with the given key exists.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Name of property.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> only if the value for <parameter>key</parameter> exist.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-property" role="function">
<title>g_udev_device_get_property ()</title>
<indexterm zone="g-udev-device-get-property"><primary sortas="g_udev_device_get_property">g_udev_device_get_property</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_property          (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>
Look up the value for <parameter>key</parameter> on <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Name of property.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value for <parameter>key</parameter> or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>key</parameter> doesn't exist on <parameter>device</parameter>. Do not free this string, it is owned by <parameter>device</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-property-as-int" role="function">
<title>g_udev_device_get_property_as_int ()</title>
<indexterm zone="g-udev-device-get-property-as-int"><primary sortas="g_udev_device_get_property_as_int">g_udev_device_get_property_as_int</primary></indexterm><programlisting><link linkend="gint">gint</link>                g_udev_device_get_property_as_int   (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>
Look up the value for <parameter>key</parameter> on <parameter>device</parameter> and convert it to an integer
using <link linkend="strtol"><function>strtol()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Name of property.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value for <parameter>key</parameter> or 0 if <parameter>key</parameter> doesn't exist or
isn't an integer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-property-as-uint64" role="function">
<title>g_udev_device_get_property_as_uint64 ()</title>
<indexterm zone="g-udev-device-get-property-as-uint64"><primary sortas="g_udev_device_get_property_as_uint64">g_udev_device_get_property_as_uint64</primary></indexterm><programlisting><link linkend="guint64">guint64</link>             g_udev_device_get_property_as_uint64
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>
Look up the value for <parameter>key</parameter> on <parameter>device</parameter> and convert it to an unsigned
64-bit integer using <link linkend="strtoll"><function>strtoll()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Name of property.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value  for <parameter>key</parameter> or 0 if <parameter>key</parameter> doesn't  exist or isn't a
<link linkend="guint64"><type>guint64</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-property-as-double" role="function">
<title>g_udev_device_get_property_as_double ()</title>
<indexterm zone="g-udev-device-get-property-as-double"><primary sortas="g_udev_device_get_property_as_double">g_udev_device_get_property_as_double</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             g_udev_device_get_property_as_double
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>
Look up the value for <parameter>key</parameter> on <parameter>device</parameter> and convert it to a double
precision floating point number using <link linkend="strtod"><function>strtod()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Name of property.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value for <parameter>key</parameter> or 0.0 if <parameter>key</parameter> doesn't exist or isn't a
<link linkend="gdouble"><type>gdouble</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-property-as-boolean" role="function">
<title>g_udev_device_get_property_as_boolean ()</title>
<indexterm zone="g-udev-device-get-property-as-boolean"><primary sortas="g_udev_device_get_property_as_boolean">g_udev_device_get_property_as_boolean</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_udev_device_get_property_as_boolean
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>
Look up the value for <parameter>key</parameter> on <parameter>device</parameter> and convert it to an
boolean. This is done by doing a case-insensitive string comparison
on the string value against "1" and "true".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Name of property.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value for <parameter>key</parameter> or <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if <parameter>key</parameter> doesn't exist or
isn't a <link linkend="gboolean"><type>gboolean</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-property-as-strv" role="function">
<title>g_udev_device_get_property_as_strv ()</title>
<indexterm zone="g-udev-device-get-property-as-strv"><primary sortas="g_udev_device_get_property_as_strv">g_udev_device_get_property_as_strv</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* const * g_udev_device_get_property_as_strv (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>
Look up the value for <parameter>key</parameter> on <parameter>device</parameter> and return the result of
splitting it into non-empty tokens split at white space (only space
(' '), form-feed ('\f'), newline ('\n'), carriage return ('\r'),
horizontal tab ('\t'), and vertical tab ('\v') are considered; the
locale is not taken into account).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Name of property.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value of <parameter>key</parameter> on <parameter>device</parameter> split into tokens or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>key</parameter> doesn't exist. This array is owned by <parameter>device</parameter> and should not be freed by the caller.. <acronym>transfer</acronym> none. <acronym>array</acronym> zero-terminated=1. <acronym>element-type</acronym> utf8. </simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-sysfs-attr" role="function">
<title>g_udev_device_get_sysfs_attr ()</title>
<indexterm zone="g-udev-device-get-sysfs-attr"><primary sortas="g_udev_device_get_sysfs_attr">g_udev_device_get_sysfs_attr</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       g_udev_device_get_sysfs_attr        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Look up the sysfs attribute with <parameter>name</parameter> on <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> Name of the sysfs attribute.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value of the sysfs attribute or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if there is no
such attribute. Do not free this string, it is owned by <parameter>device</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-sysfs-attr-as-int" role="function">
<title>g_udev_device_get_sysfs_attr_as_int ()</title>
<indexterm zone="g-udev-device-get-sysfs-attr-as-int"><primary sortas="g_udev_device_get_sysfs_attr_as_int">g_udev_device_get_sysfs_attr_as_int</primary></indexterm><programlisting><link linkend="gint">gint</link>                g_udev_device_get_sysfs_attr_as_int (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Look up the sysfs attribute with <parameter>name</parameter> on <parameter>device</parameter> and convert it to an integer
using <link linkend="strtol"><function>strtol()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> Name of the sysfs attribute.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value of the sysfs attribute or 0 if there is no such
attribute.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-sysfs-attr-as-uint64" role="function">
<title>g_udev_device_get_sysfs_attr_as_uint64 ()</title>
<indexterm zone="g-udev-device-get-sysfs-attr-as-uint64"><primary sortas="g_udev_device_get_sysfs_attr_as_uint64">g_udev_device_get_sysfs_attr_as_uint64</primary></indexterm><programlisting><link linkend="guint64">guint64</link>             g_udev_device_get_sysfs_attr_as_uint64
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Look up the sysfs attribute with <parameter>name</parameter> on <parameter>device</parameter> and convert it to an unsigned
64-bit integer using <link linkend="strtoll"><function>strtoll()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> Name of the sysfs attribute.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value of the sysfs attribute or 0 if there is no such
attribute.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-sysfs-attr-as-double" role="function">
<title>g_udev_device_get_sysfs_attr_as_double ()</title>
<indexterm zone="g-udev-device-get-sysfs-attr-as-double"><primary sortas="g_udev_device_get_sysfs_attr_as_double">g_udev_device_get_sysfs_attr_as_double</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             g_udev_device_get_sysfs_attr_as_double
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Look up the sysfs attribute with <parameter>name</parameter> on <parameter>device</parameter> and convert it to a double
precision floating point number using <link linkend="strtod"><function>strtod()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> Name of the sysfs attribute.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value of the sysfs attribute or 0.0 if there is no such
attribute.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-sysfs-attr-as-boolean" role="function">
<title>g_udev_device_get_sysfs_attr_as_boolean ()</title>
<indexterm zone="g-udev-device-get-sysfs-attr-as-boolean"><primary sortas="g_udev_device_get_sysfs_attr_as_boolean">g_udev_device_get_sysfs_attr_as_boolean</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_udev_device_get_sysfs_attr_as_boolean
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Look up the sysfs attribute with <parameter>name</parameter> on <parameter>device</parameter> and convert it to an
boolean. This is done by doing a case-insensitive string comparison
on the string value against "1" and "true".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> Name of the sysfs attribute.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value of the sysfs attribute or <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if there is no such
attribute.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-device-get-sysfs-attr-as-strv" role="function">
<title>g_udev_device_get_sysfs_attr_as_strv ()</title>
<indexterm zone="g-udev-device-get-sysfs-attr-as-strv"><primary sortas="g_udev_device_get_sysfs_attr_as_strv">g_udev_device_get_sysfs_attr_as_strv</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* const * g_udev_device_get_sysfs_attr_as_strv
                                                        (<link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Look up the sysfs attribute with <parameter>name</parameter> on <parameter>device</parameter> and return the result of
splitting it into non-empty tokens split at white space (only space (' '),
form-feed ('\f'), newline ('\n'), carriage return ('\r'), horizontal
tab ('\t'), and vertical tab ('\v') are considered; the locale is
not taken into account).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> Name of the sysfs attribute.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value of the sysfs attribute split into tokens or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if there is no such attribute. This array is owned by <parameter>device</parameter> and should not be freed by the caller.. <acronym>transfer</acronym> none. <acronym>array</acronym> zero-terminated=1. <acronym>element-type</acronym> utf8. </simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
