<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GUdevClient">
<refmeta>
<refentrytitle role="top_of_page" id="GUdevClient.top_of_page">GUdevClient</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GUDEV Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GUdevClient</refname>
<refpurpose>Query devices and listen to uevents</refpurpose>
</refnamediv>

<refsynopsisdiv id="GUdevClient.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GUdevClient-struct">GUdevClient</link>;
                    <link linkend="GUdevClientClass">GUdevClientClass</link>;
enum                <link linkend="GUdevDeviceType">GUdevDeviceType</link>;
typedef             <link linkend="GUdevDeviceNumber">GUdevDeviceNumber</link>;
<link linkend="GUdevClient">GUdevClient</link> *       <link linkend="g-udev-client-new">g_udev_client_new</link>                   (const <link linkend="gchar">gchar</link> * const *subsystems);
<link linkend="GList">GList</link> *             <link linkend="g-udev-client-query-by-subsystem">g_udev_client_query_by_subsystem</link>    (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *subsystem);
<link linkend="GUdevDevice">GUdevDevice</link> *       <link linkend="g-udev-client-query-by-device-number">g_udev_client_query_by_device_number</link>
                                                        (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         <link linkend="GUdevDeviceType">GUdevDeviceType</link> type,
                                                         <link linkend="GUdevDeviceNumber">GUdevDeviceNumber</link> number);
<link linkend="GUdevDevice">GUdevDevice</link> *       <link linkend="g-udev-client-query-by-device-file">g_udev_client_query_by_device_file</link>  (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *device_file);
<link linkend="GUdevDevice">GUdevDevice</link> *       <link linkend="g-udev-client-query-by-sysfs-path">g_udev_client_query_by_sysfs_path</link>   (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *sysfs_path);
<link linkend="GUdevDevice">GUdevDevice</link> *       <link linkend="g-udev-client-query-by-subsystem-and-name">g_udev_client_query_by_subsystem_and_name</link>
                                                        (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *subsystem,
                                                         const <link linkend="gchar">gchar</link> *name);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GUdevClient.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----GUdevClient
</synopsis>
</refsect1>





<refsect1 id="GUdevClient.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="GUdevClient--subsystems">subsystems</link>&quot;               <link linkend="GStrv">GStrv</link>*                : Read / Write / Construct Only
</synopsis>
</refsect1>

<refsect1 id="GUdevClient.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="GUdevClient-uevent">uevent</link>&quot;                                         : Run Last
</synopsis>
</refsect1>


<refsect1 id="GUdevClient.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="GUdevClient"><type>GUdevClient</type></link> is used to query information about devices on a Linux
system from the Linux kernel and the udev device
manager.
</para>
<para>
Device information is retrieved from the kernel (through the
<literal>sysfs</literal> filesystem) and the udev daemon (through a
<literal>tmpfs</literal> filesystem) and presented through
<link linkend="GUdevDevice"><type>GUdevDevice</type></link> objects. This means that no blocking IO ever happens
(in both cases, we are essentially just reading data from kernel
memory) and as such there are no asynchronous versions of the
provided methods.
</para>
<para>
To get information about a device, use
<link linkend="g-udev-client-query-by-subsystem"><function>g_udev_client_query_by_subsystem()</function></link>,
<link linkend="g-udev-client-query-by-device-number"><function>g_udev_client_query_by_device_number()</function></link>,
<link linkend="g-udev-client-query-by-device-file"><function>g_udev_client_query_by_device_file()</function></link>,
<link linkend="g-udev-client-query-by-sysfs-path"><function>g_udev_client_query_by_sysfs_path()</function></link> or
<link linkend="g-udev-client-query-by-subsystem-and-name"><function>g_udev_client_query_by_subsystem_and_name()</function></link>.
</para>
<para>
To listen to uevents, connect to the <link linkend="GUdevClient-uevent"><type>"uevent"</type></link> signal.</para>
<para>
</para>
</refsect1>

<refsect1 id="GUdevClient.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GUdevClient-struct" role="struct">
<title>GUdevClient</title>
<indexterm zone="GUdevClient-struct"><primary sortas="GUdevClient">GUdevClient</primary></indexterm><programlisting>typedef struct _GUdevClient GUdevClient;</programlisting>
<para>
The <link linkend="GUdevClient"><type>GUdevClient</type></link> struct is opaque and should not be accessed directly.</para>
<para>
</para><variablelist role="struct">
</variablelist></refsect2>
<refsect2 id="GUdevClientClass" role="struct">
<title>GUdevClientClass</title>
<indexterm zone="GUdevClientClass"><primary sortas="GUdevClientClass">GUdevClientClass</primary></indexterm><programlisting>typedef struct {
  GObjectClass   parent_class;

  /* signals */
  void (*uevent) (GUdevClient  *client,
                  const gchar  *action,
                  GUdevDevice  *device);
} GUdevClientClass;
</programlisting>
<para>
Class structure for <link linkend="GUdevClient"><type>GUdevClient</type></link>.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GObjectClass">GObjectClass</link>&#160;<structfield>parent_class</structfield>;</term>
<listitem><simpara> Parent class.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>uevent</structfield>&#160;()</term>
<listitem><simpara> Signal class handler for the <link linkend="GUdevClient-uevent"><type>"uevent"</type></link> signal.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GUdevDeviceType" role="enum">
<title>enum GUdevDeviceType</title>
<indexterm zone="GUdevDeviceType"><primary sortas="GUdevDeviceType">GUdevDeviceType</primary></indexterm><programlisting>typedef enum
{
  G_UDEV_DEVICE_TYPE_NONE = 0,
  G_UDEV_DEVICE_TYPE_BLOCK = 'b',
  G_UDEV_DEVICE_TYPE_CHAR = 'c',
} GUdevDeviceType;
</programlisting>
<para>
Enumeration used to specify a the type of a device.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="G-UDEV-DEVICE-TYPE-NONE--CAPS" role="constant">
<term><literal>G_UDEV_DEVICE_TYPE_NONE</literal></term>
<listitem><simpara> Device does not have a device file.
</simpara></listitem>
</varlistentry>
<varlistentry id="G-UDEV-DEVICE-TYPE-BLOCK--CAPS" role="constant">
<term><literal>G_UDEV_DEVICE_TYPE_BLOCK</literal></term>
<listitem><simpara> Device is a block device.
</simpara></listitem>
</varlistentry>
<varlistentry id="G-UDEV-DEVICE-TYPE-CHAR--CAPS" role="constant">
<term><literal>G_UDEV_DEVICE_TYPE_CHAR</literal></term>
<listitem><simpara> Device is a character device.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GUdevDeviceNumber" role="typedef">
<title>GUdevDeviceNumber</title>
<indexterm zone="GUdevDeviceNumber"><primary sortas="GUdevDeviceNumber">GUdevDeviceNumber</primary></indexterm><programlisting>typedef int GUdevDeviceNumber;
</programlisting>
<para>
Corresponds to the standard <link linkend="dev-t"><type>dev_t</type></link> type as defined by POSIX (Until
bug 584517 is resolved this is aliased to an integer).</para>
<para>
</para></refsect2>
<refsect2 id="g-udev-client-new" role="function">
<title>g_udev_client_new ()</title>
<indexterm zone="g-udev-client-new"><primary sortas="g_udev_client_new">g_udev_client_new</primary></indexterm><programlisting><link linkend="GUdevClient">GUdevClient</link> *       g_udev_client_new                   (const <link linkend="gchar">gchar</link> * const *subsystems);</programlisting>
<para>
Constructs a <link linkend="GUdevClient"><type>GUdevClient</type></link> object that can be used to query
information about devices. Connect to the <link linkend="GUdevClient-uevent"><type>"uevent"</type></link>
signal to listen for uevents.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>subsystems</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="NULL--CAPS"><literal>NULL</literal></link> terminated string array of subsystems to listen for uevents on, <link linkend="NULL--CAPS"><literal>NULL</literal></link> to not listen on uevents at all, or an empty array to listen to uevents on all subsystems. See the documentation for the <link linkend="GUdevClient--subsystems"><type>"subsystems"</type></link> property for details on this parameter.. <acronym>allow-none</acronym>. </simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A new <link linkend="GUdevClient"><type>GUdevClient</type></link> object. Free with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-client-query-by-subsystem" role="function">
<title>g_udev_client_query_by_subsystem ()</title>
<indexterm zone="g-udev-client-query-by-subsystem"><primary sortas="g_udev_client_query_by_subsystem">g_udev_client_query_by_subsystem</primary></indexterm><programlisting><link linkend="GList">GList</link> *             g_udev_client_query_by_subsystem    (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *subsystem);</programlisting>
<para>
Gets all devices belonging to <parameter>subsystem</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevClient"><type>GUdevClient</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subsystem</parameter>&#160;:</term>
<listitem><simpara> The subsystem to get devices for or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to get all devices.. <acronym>allow-none</acronym>. </simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A list of <link linkend="GUdevDevice"><type>GUdevDevice</type></link> objects. The caller should free the result by using <link linkend="g-object-unref"><function>g_object_unref()</function></link> on each element in the list and then <link linkend="g-list-free"><function>g_list_free()</function></link> on the list.. <acronym>element-type</acronym> GUdevDevice. </simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-client-query-by-device-number" role="function">
<title>g_udev_client_query_by_device_number ()</title>
<indexterm zone="g-udev-client-query-by-device-number"><primary sortas="g_udev_client_query_by_device_number">g_udev_client_query_by_device_number</primary></indexterm><programlisting><link linkend="GUdevDevice">GUdevDevice</link> *       g_udev_client_query_by_device_number
                                                        (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         <link linkend="GUdevDeviceType">GUdevDeviceType</link> type,
                                                         <link linkend="GUdevDeviceNumber">GUdevDeviceNumber</link> number);</programlisting>
<para>
Looks up a device for a type and device number.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevClient"><type>GUdevClient</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> A value from the <link linkend="GUdevDeviceType"><type>GUdevDeviceType</type></link> enumeration.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>number</parameter>&#160;:</term>
<listitem><simpara> A device number.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link> object or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the device was not found. Free with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-client-query-by-device-file" role="function">
<title>g_udev_client_query_by_device_file ()</title>
<indexterm zone="g-udev-client-query-by-device-file"><primary sortas="g_udev_client_query_by_device_file">g_udev_client_query_by_device_file</primary></indexterm><programlisting><link linkend="GUdevDevice">GUdevDevice</link> *       g_udev_client_query_by_device_file  (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *device_file);</programlisting>
<para>
Looks up a device for a device file.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevClient"><type>GUdevClient</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device_file</parameter>&#160;:</term>
<listitem><simpara> A device file.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link> object or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the device was not found. Free with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-client-query-by-sysfs-path" role="function">
<title>g_udev_client_query_by_sysfs_path ()</title>
<indexterm zone="g-udev-client-query-by-sysfs-path"><primary sortas="g_udev_client_query_by_sysfs_path">g_udev_client_query_by_sysfs_path</primary></indexterm><programlisting><link linkend="GUdevDevice">GUdevDevice</link> *       g_udev_client_query_by_sysfs_path   (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *sysfs_path);</programlisting>
<para>
Looks up a device for a sysfs path.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevClient"><type>GUdevClient</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sysfs_path</parameter>&#160;:</term>
<listitem><simpara> A sysfs path.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link> object or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the device was not found. Free with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-udev-client-query-by-subsystem-and-name" role="function">
<title>g_udev_client_query_by_subsystem_and_name ()</title>
<indexterm zone="g-udev-client-query-by-subsystem-and-name"><primary sortas="g_udev_client_query_by_subsystem_and_name">g_udev_client_query_by_subsystem_and_name</primary></indexterm><programlisting><link linkend="GUdevDevice">GUdevDevice</link> *       g_udev_client_query_by_subsystem_and_name
                                                        (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *subsystem,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Looks up a device for a subsystem and name.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GUdevClient"><type>GUdevClient</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subsystem</parameter>&#160;:</term>
<listitem><simpara> A subsystem name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> The name of the device.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GUdevDevice"><type>GUdevDevice</type></link> object or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the device was not found. Free with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="GUdevClient.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GUdevClient--subsystems" role="property"><title>The <literal>&quot;subsystems&quot;</literal> property</title>
<indexterm zone="GUdevClient--subsystems"><primary sortas="GUdevClient:subsystems">GUdevClient:subsystems</primary></indexterm><programlisting>  &quot;subsystems&quot;               <link linkend="GStrv">GStrv</link>*                : Read / Write / Construct Only</programlisting>
<para>
The subsystems to listen for uevents on.
</para>
<para>
To listen for only a specific DEVTYPE for a given SUBSYSTEM, use
"subsystem/devtype". For example, to only listen for uevents
where SUBSYSTEM is usb and DEVTYPE is usb_interface, use
"usb/usb_interface".
</para>
<para>
If this property is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, then no events will be reported. If
it's the empty array, events from all subsystems will be
reported.</para>
<para>
</para></refsect2>
</refsect1>

<refsect1 id="GUdevClient.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GUdevClient-uevent" role="signal"><title>The <literal>&quot;uevent&quot;</literal> signal</title>
<indexterm zone="GUdevClient-uevent"><primary sortas="GUdevClient::uevent">GUdevClient::uevent</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GUdevClient">GUdevClient</link> *client,
                                                        <link linkend="gchar">gchar</link>       *action,
                                                        <link linkend="GUdevDevice">GUdevDevice</link> *device,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run Last</programlisting>
<para>
Emitted when <parameter>client</parameter> receives an uevent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GUdevClient"><type>GUdevClient</type></link> receiving the event.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action</parameter>&#160;:</term>
<listitem><simpara> The action for the uevent e.g. "add", "remove", "change", "move", etc.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> Details about the <link linkend="GUdevDevice"><type>GUdevDevice</type></link> the event is for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
